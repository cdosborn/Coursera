;; Programming Languages, Homework 5

#lang racket
(provide (all-defined-out)) ;; so we can put tests in a second file

;; definition of structures for MUPL programs - Do NOT change
(struct var  (string) #:transparent)  ;; a variable, e.g., (var "foo")
(struct int  (num)    #:transparent)  ;; a constant number, e.g., (int 17)
(struct add  (e1 e2)  #:transparent)  ;; add two expressions
(struct ifgreater (e1 e2 e3 e4)    #:transparent) ;; if e1 > e2 then e3 else e4
(struct fun  (nameopt formal body) #:transparent) ;; a recursive(?) 1-argument function
(struct call (funexp actual)       #:transparent) ;; function call
(struct mlet (var e body) #:transparent) ;; a local binding (let var = e in body) 
(struct apair (e1 e2)     #:transparent) ;; make a new pair
(struct fst  (e)    #:transparent) ;; get first part of a pair
(struct snd  (e)    #:transparent) ;; get second part of a pair
(struct aunit ()    #:transparent) ;; unit value -- good for ending a list
(struct isaunit (e) #:transparent) ;; evaluate to 1 if e is unit else 0

;; a closure is not in "source" programs; it is what functions evaluate to
(struct closure (env fun) #:transparent) 

;; Problem 1

(define (racketlist->mupllist rlist)
  (if (null? rlist)
	 (aunit)
	 (apair (car rlist) (racketlist->mupllist (cdr rlist)))))

(define (mupllist->racketlist mlist)
  (if (aunit? mlist)
	 null
	 (cons (apair-e1 mlist) (mupllist->racketlist (apair-e2 mlist)))))

;; Problem 2

;; lookup a variable in an environment
;; Do NOT change this function
(define (envlookup env str)
  (cond [(null? env) (error "unbound variable during evaluation" str)]
        [(equal? (car (car env)) str) (cdr (car env))]
        [#t (envlookup (cdr env) str)]))

;; Do NOT change the two cases given to you.  
;; DO add more cases for other kinds of MUPL expressions.
;; We will test eval-under-env by calling it directly even though
;; "in real life" it would be a helper function of eval-exp.
(define (eval-under-env e env)
  (cond [(or (int? e) (or (closure? e) (aunit? e))) e]
		  [(var? e) 
         (envlookup env (var-string e))]
        [(add? e) 
         (let ([v1 (eval-under-env (add-e1 e) env)]
               [v2 (eval-under-env (add-e2 e) env)])
           (if (and (int? v1)
                    (int? v2))
               (int (+ (int-num v1) 
                       (int-num v2)))
               (error "MUPL addition applied to non-number")))]
		  [(ifgreater? e) 
			(let ([v1 (eval-under-env (ifgreater-e1 e) env)]
					[v2 (eval-under-env (ifgreater-e2 e) env)])
			  (if (and (int? v1) (int? v2))
			    (if (> (int-num v1) (int-num  v2))
					(eval-under-env (ifgreater-e3 e) env)
					(eval-under-env (ifgreater-e4 e) env))
				 (error "MUPL int comparsion with non-number")))]
		  [(fun? e) (closure env e)]
		  [(call? e)
			(let* ([clos (eval-under-env (call-funexp e) env)]
					 [arg (eval-under-env (call-actual e) env)]
					 [fn (closure-fun clos)]
					 [fn-name-str (fun-nameopt fn)]
					 [fn-arg-str (fun-formal fn)]
					 [fn-body (fun-body fn)]
					 [clos-env (cons (cons fn-arg-str arg) (cons (cons fn-name-str clos) (closure-env clos)))]
					 [clos-anon-fn-env (cons (cons fn-arg-str arg) (closure-env clos))])
			  (cond [(not (closure? clos)) (error "MUPL fun call not the result of a defined fn")]
					  [fn-name-str (eval-under-env fn-body clos-env)]
					  [#t (eval-under-env fn-body clos-anon-fn-env)]))]
		  [(mlet? e)
			(let* ([let-var-str (mlet-var e)]
					 [let-exp (mlet-e e)]
					 [let-exp-val (eval-under-env let-exp env)]
					 [let-body (mlet-body e)]
					 [let-body-env (cons (cons let-var-str let-exp-val) env)]
					 [let-body-val (eval-under-env let-body let-body-env)])
			  (if (not (string? let-var-str)) 
				 (error "MUPL mlet expression expects a string")
				 let-body-val))]
		  [(apair? e) (apair (eval-under-env (apair-e1 e) env) (eval-under-env (apair-e2 e) env))] 
		  [(fst? e)
			(let ([pair (eval-under-env (fst-e e) env)])
			  (if (not (apair? pair))
				 (error "cannot retrieve head of non-pair")
				 (apair-e1 pair)))]
		  [(snd? e)
			(let ([pair (eval-under-env (snd-e e) env)])
			  (if (not (apair? pair))
				 (error "cannot retrieve tail of non-pair")
				 (apair-e2 pair)))]
		  [(isaunit? e) (if (aunit? (eval-under-env (isaunit-e e) env)) (int 1) (int 0))]
        [#t (error "bad MUPL expression")])) 
        
;; Do NOT change
(define (eval-exp e)
    (eval-under-env e null))

;; Problem 3

(define (ifaunit e1 e2 e3) (ifgreater (isaunit e1) (int 0) e2 e3))

(define (mlet* lstlst e2) 
  (if (null? lstlst)
	 e2
	 (let ([str (car (car lstlst))]
			 [e (cdr (car lstlst))])
		(mlet str e (mlet* (cdr lstlst) e2)))))

(define (ifeq e1 e2 e3 e4) 
  (let ([_x e1]
		  [_y e2])
	 (if (and (and (int? _x) (int? _y)) (= (int-num _x) (int-num _y)))
			  e3
			  e4)))

;; Problem 4

(define mupl-map 
  (fun "muple-map" "map-fun"
	  (fun "mupl-map-aux" "mupl-list"
			 (ifaunit (var "mupl-list")
				 (aunit)
				 (apair (call (var "map-fun") (fst (var "mupl-list"))) 
						  (call (var "mupl-map-aux") (snd (var "mupl-list"))))))))

(define mupl-mapAddN 
  (mlet "map" mupl-map
        (fun "mupl-mapAddN" "i" 
				 (call (var "map")
						 (fun #f "inc" (add (var "i") (var "inc")))))))

;; Challenge Problem

(struct fun-challenge (nameopt formal body freevars) #:transparent) ;; a recursive(?) 1-argument function

;; We will test this function directly, so it must do
;; as described in the assignment
(define (compute-free-vars e) "CHANGE")

;; Do NOT share code with eval-under-env because that will make
;; auto-grading and peer assessment more difficult, so
;; copy most of your interpreter here and make minor changes
(define (eval-under-env-c e env) "CHANGE")

;; Do NOT change this
(define (eval-exp-c e)
  (eval-under-env-c (compute-free-vars e) null))
